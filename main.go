// Copyright 2024 The Inspektor Gadget authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"archive/tar"
	"bytes"
	"debug/elf"
	"fmt"
	"html"
	"io"
	"strings"
	"syscall/js"
	"unsafe"
)

func clear() {
	resultDiv := js.Global().Get("document").Call("getElementById", "result")
	resultDiv.Set("innerHTML", "")
}

func log(format string, a ...any) {
	resultDiv := js.Global().Get("document").Call("getElementById", "result")
	str := resultDiv.Get("innerHTML").String()
	str += html.EscapeString(fmt.Sprintf(format, a...)) + "\n<br>\n"
	resultDiv.Set("innerHTML", str)
}

func main() {
	wait := make(chan struct{}, 0)

	log("Ready.")

	runButton := js.Global().Get("document").Call("getElementById", "runButton")
	runButton.Set("disabled", false)

	<-wait
}

//export update
func update() {
	js.Global().Get("document").Call("getElementById", "result").Set("value", "WASM: update()")
}

func parseELF(elfReader *bytes.Reader) {
	file, err := elf.NewFile(elfReader)
	if err != nil {
		log("failed to parse ELF file: %v", err)
		return
	}
	defer file.Close()

	log("Programs:\n")
	for _, sec := range file.Sections {
		if sec.Type == elf.SHT_PROGBITS && (sec.Flags&elf.SHF_EXECINSTR) != 0 && sec.Size > 0 {
			log("Name: %s\n", sec.Name)
		}
	}
	log("Maps:\n")
	for _, sec := range file.Sections {
		if sec.Name == ".maps" || strings.HasPrefix(sec.Name, "maps") {
			log("Name: %s\n", sec.Name)
		}
	}
}

func isElf(data []byte) bool {
	if len(data) < 4 {
		return false
	}
	// ELF magic: 0x7f 45 4c 46
	return data[0] == 0x7f && data[1] == 0x45 && data[2] == 0x4c && data[3] == 0x46
}

func isTar(data []byte) bool {
	if len(data) < 262 {
		return false
	}
	tarExpectedMagic := []byte("ustar")
	tarActualMagic := data[257:262]
	return string(tarExpectedMagic) == string(tarActualMagic)
}

func parseTar(reader io.Reader) error {
	tarReader := tar.NewReader(reader)

	for {
		header, err := tarReader.Next()
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("failed to read tar header: %w", err)
		}

		switch header.Typeflag {
		case tar.TypeReg:
			var buf bytes.Buffer
			_, err := io.Copy(&buf, tarReader)
			if err != nil {
				return err
			}
			b := buf.Bytes()
			if isElf(b) {
				log("ELF file: %s", header.Name)

				elfReader := bytes.NewReader(b)
				parseELF(elfReader)
			}
		}
	}

	return nil
}

//export readFile
func readFile(ptr *uint8, length int) int {
	clear()

	data := unsafe.Slice(ptr, length)

	if len(data) < 265 {
		log("cannot parse file (%d bytes)", len(data))
		return 1
	}

	if isElf(data) {
		log("ELF file detected")
		elfReader := bytes.NewReader(data)
		parseELF(elfReader)
		return 0
	}

	if isTar(data) {
		log("TAR file detected")
		tarReader := bytes.NewReader(data)
		err := parseTar(tarReader)
		if err != nil {
			log(err.Error())
		}
		return 0
	}

	log("Cannot identify file. Please give either a tar file generated by 'ig image export' or an ELF file.")

	return 0
}
